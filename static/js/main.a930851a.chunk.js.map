{"version":3,"sources":["components/counter.jsx","components/counters.jsx","components/navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["Counter","this","props","children","className","getBadgeClassNames","formatText","onClick","onIncrease","counter","onDelete","id","value","Component","Counters","onReset","counters","map","key","NavBar","class","href","totalCounters","App","state","IncreaseValue","index","indexOf","setState","resetValue","item","deleteCounter","counterId","filter","Fragment","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6SAoCeA,G,uLAjCH,IAAD,OACP,OACE,6BACGC,KAAKC,MAAMC,SACZ,0BAAMC,UAAWH,KAAKI,sBAAuBJ,KAAKK,cAClD,4BACEF,UAAU,4BACVG,QAAS,kBAAI,EAAKL,MAAMM,WAAW,EAAKN,MAAMO,WAFhD,YAMA,4BACEL,UAAU,4BACVG,QAAS,kBAAM,EAAKL,MAAMQ,SAAS,EAAKR,MAAMO,QAAQE,MAFxD,a,2CAaJ,MADc,oBACkC,IAA7BV,KAAKC,MAAMO,QAAQG,MAAc,UAAY,a,mCAGpD,IACJA,EAAUX,KAAKC,MAAMO,QAArBG,MACR,OAAiB,IAAVA,EAAc,OAASA,M,GA9BZC,cC2BPC,E,iLAzBH,IAAD,EACsCb,KAAKC,MAA3Ca,EADA,EACAA,QAAQL,EADR,EACQA,SAASF,EADjB,EACiBA,WAAWQ,EAD5B,EAC4BA,SACnC,OACE,6BACE,4BACET,QAASQ,EACTX,UAAU,+BAFZ,SAMCY,EAASC,KAAI,SAAAR,GAAO,OACnB,kBAAC,EAAD,CACES,IAAKT,EAAQE,GACbD,SAAUA,EACVF,WAAYA,EACZC,QAASA,GAET,wCAAcA,EAAQE,a,GAlBXE,aCYRM,E,iLAVX,OACE,yBAAKC,MAAM,gCACT,uBAAGA,MAAM,eAAeC,KAAK,KAC1BpB,KAAKC,MAAMoB,oB,GANDT,a,kOCyDNU,E,2MArDbC,MAAQ,CACNR,SAAU,CACR,CAAEL,GAAI,EAAGC,MAAO,GAChB,CAAED,GAAI,EAAGC,MAAO,GAChB,CAAED,GAAI,EAAGC,MAAO,GAChB,CAAED,GAAI,EAAGC,MAAO,K,EAIpBa,cAAgB,SAAAhB,GACd,IAAMO,EAAQ,YAAO,EAAKQ,MAAMR,UAC1BU,EAAQV,EAASW,QAAQlB,GAC/BO,EAASU,G,yVAAT,IAAuBjB,GACvBO,EAASU,GAAOd,QAEhB,EAAKgB,SAAS,CAAEZ,c,EAGlBa,WAAa,WACX,IAAMb,EAAW,EAAKQ,MAAMR,SAASC,KAAI,SAAAa,GAEvC,OADAA,EAAKlB,MAAQ,EACNkB,KAET,EAAKF,SAAS,CAAEZ,c,EAGlBe,cAAgB,SAAAC,GACd,IAAMhB,EAAW,EAAKQ,MAAMR,SAASiB,QAAO,SAAAH,GAAI,OAAIA,EAAKnB,KAAOqB,KAChE,EAAKJ,SAAS,CAAEZ,c,wEAKhB,OACE,kBAAC,IAAMkB,SAAP,KACE,kBAAC,EAAD,CACEZ,cACErB,KAAKuB,MAAMR,SAASiB,QAAO,SAAAH,GAAI,OAAIA,EAAKlB,MAAQ,KAAGuB,SAGvD,0BAAM/B,UAAU,aACd,kBAAC,EAAD,CACEY,SAAUf,KAAKuB,MAAMR,SACrBD,QAASd,KAAK4B,WACdrB,WAAYP,KAAKwB,cACjBf,SAAUT,KAAK8B,sB,GA9CTlB,aCOEuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a930851a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Counter extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.props.children}\r\n        <span className={this.getBadgeClassNames()}>{this.formatText()}</span>\r\n        <button\r\n          className=\"btn btn-secondary  btn-sm\"\r\n          onClick={()=>this.props.onIncrease(this.props.counter)}\r\n        >\r\n          Increase\r\n        </button>\r\n        <button\r\n          className=\"btn btn-danger m-2 btn-sm\"\r\n          onClick={() => this.props.onDelete(this.props.counter.id)}\r\n        >\r\n          Delete\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  \r\n  getBadgeClassNames() {\r\n    let classes = \"badge m-2 badge-\";\r\n    return (classes += this.props.counter.value === 0 ? \"warning\" : \"primary\");\r\n  }\r\n\r\n  formatText() {\r\n    const { value } = this.props.counter;\r\n    return value === 0 ? \"Zero\" : value;\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import React, { Component } from \"react\";\r\nimport Counter from \"./counter\";\r\n\r\nclass Counters extends Component {\r\n  render() {\r\n    const {onReset,onDelete,onIncrease,counters}=this.props;\r\n    return (\r\n      <div>\r\n        <button\r\n          onClick={onReset}\r\n          className=\"btn btn-secondary btn-sm m2\"\r\n        >\r\n          reset\r\n        </button>\r\n        {counters.map(counter => (\r\n          <Counter\r\n            key={counter.id}\r\n            onDelete={onDelete}\r\n            onIncrease={onIncrease}\r\n            counter={counter}\r\n          >\r\n            <h3>counter #{counter.id}</h3>\r\n          </Counter>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counters;\r\n","import React, { Component } from \"react\";\r\n   \r\nclass NavBar extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <nav class=\"navbar navbar-light bg-light\">\r\n        <a class=\"navbar-brand\" href=\"#\">\r\n          {this.props.totalCounters}\r\n        </a>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Counters from \"./components/counters\";\nimport NavBar from \"./components/navbar\";\n\nclass App extends Component {\n  state = {\n    counters: [\n      { id: 1, value: 4 },\n      { id: 2, value: 0 },\n      { id: 3, value: 5 },\n      { id: 4, value: 1 }\n    ]\n  };\n\n  IncreaseValue = counter => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    counters[index].value++;\n    // console.log(this.state.counters[index]);\n    this.setState({ counters });\n  };\n\n  resetValue = () => {\n    const counters = this.state.counters.map(item => {\n      item.value = 0;\n      return item;\n    });\n    this.setState({ counters });\n  };\n\n  deleteCounter = counterId => {\n    const counters = this.state.counters.filter(item => item.id !== counterId);\n    this.setState({ counters });\n    // console.log(counter);\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <NavBar\n          totalCounters={\n            this.state.counters.filter(item => item.value > 0).length\n          }\n        />\n        <main className=\"container\">\n          <Counters\n            counters={this.state.counters}\n            onReset={this.resetValue}\n            onIncrease={this.IncreaseValue}\n            onDelete={this.deleteCounter}\n          />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}